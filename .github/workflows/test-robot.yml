name: robot test

on:
  pull_request:
    branches:
      - main

  push:
    branches:
      - main

  # schedule:
  #   - cron: "30 18 * * *"

env: 
  aaa: llvm
  bbb: sim
  ccc: aaa:aaa:aaa:$ccc


jobs:
  robot:
    # The CMake configure and build commands are platform agnostic and should work equally
    # well on Windows or Mac.  You can convert this to a matrix build if you need
    # cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: test 111111
        run: |
          echo $LD_LIBRARY_PATH
          export LD_LIBRARY_PATH=/usr/local/chipltech/simulator/lib:/usr/local/chipltech/thunk/lib/:/usr/local/chipltech/synapse/lib/:$LD_LIBRARY_PATH
          echo $aaa
          echo $bbb
          echo $ccc
          echo $LD_LIBRARY_PATH
      
      - name: test comments
        id: get-dependency
        run: |
          echo ${{github.event.pull_request.body}}
          echo "${{github.event.pull_request.body}}" >> $GITHUB_OUTPUT

      - name: export
        run: |
          echo ${{steps.get-dependency.outputs}}

      # - name: test docker
      #   run: |
      #     docker images
      #     docker run -i \
      #       --name test-docker \
      #       ubuntu:22.04 \
      #       /usr/bin/bash 
      #     docker start test-docker
      #     docker ps -a
      #     docker exec -i test-docker /usr/bin/bash -c "echo hello \
      #     && echo world \
      #     && pwd \
      #     && ls \
      #     && cd home \
      #     && pwd \
      #     && ls"
      #     docker ps -a

      # - name: test docker exist
      #   run: |
      #     docker ps -a
      #     docker exec -i test-docker /usr/bin/bash -c "echo hello \
      #     && echo hello \
      #     && pwd \
      #     && ls \
      #     && cd usr \
      #     && pwd \
      #     && ls"
      #     docker ps -a
      #     docker stop test-docker
      #     docker rm test-docker
      #     docker ps -a

      # - name: test 2222222
      #   run: |
      #     wget -O miniconda3.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
      #         && bash miniconda3.sh -b -p /usr/share/miniconda \
      #         && rm miniconda3.sh
      #     export PATH=/usr/share/miniconda/bin:$PATH
      #     conda init bash
      #     source /home/runner/.bashrc
      #     # cat /home/runner/.bashrc
      #     conda create --name torch -y python=3.10
      #     export PATH=/usr/share/miniconda/envs/torch/bin:$PATH
      #     # CONDA_ENV=$(conda env list --json | jq -r ".envs | .[-1]")
      #     echo $PATH
      #     conda activate "${CONDA_ENV}"

      # - name: Download Miniconda installer
      #   run: wget -O miniconda3.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh
    
      # - name: Install Miniconda
      #   run: bash miniconda3.sh -b -p ~/miniconda
  
      # - name: Initialize Conda
      #   run: |
      #     ~/miniconda/bin/conda init bash
      #     ~/miniconda/bin/conda config --set auto_activate_base false
    
      # - name: Reload shell
      #   shell: bash -l {0}
      #   run: echo "Shell reloaded"
  
      # - name: Create Conda Environment
      #   run: |
      #     source ~/miniconda/etc/profile.d/conda.sh
      #     conda create --name torch -y python=3.10
  
      # - name: Activate Conda Environment
      #   run: |
      #     source ~/miniconda/etc/profile.d/conda.sh
      #     conda activate torch
      #     echo "Conda environment activated"
      #     which python
      #     python --version
          
      # - name: Verify Environment
      #   run: |
      #     id
      #     sudo su
      #     id
      #     which python
      #     python --version

      # - name: test failure push
      #   if: ${{ failure() && steps.failure.conclusion == 'failure' && github.event_name == 'push' }}
      #   run: |
      #     echo '${{ github.event.after }}'
      #     curl 'https://oapi.dingtalk.com/robot/send?access_token=5e773ecb4c8c643a3fe16df50dc260b3220bf425033503f5bc4cca01421f1ec9'  \
      #     -H 'Content-Type: application/json' \
      #     -d '{"msgtype": "text","text": {"content":"测试新方法111 commit sha ${{ github.event.pull_request.head.sha }}\n !!!!@13357605857"},"at":{"atMobiles":["13357605857"],"isAtAll":false}}'

      # - name: test failure pr
      #   if: ${{ failure() && steps.failure.conclusion == 'failure' && github.event_name == 'pull_request' }}
      #   run: |
      #     echo '${{ github.event.after }}'
      #     curl 'https://oapi.dingtalk.com/robot/send?access_token=5e773ecb4c8c643a3fe16df50dc260b3220bf425033503f5bc4cca01421f1ec9'  \
      #     -H 'Content-Type: application/json' \
      #     -d '{"msgtype": "text","text": {"content":"测试新方法222 commit sha ${{ github.event.pull_request.head.sha }}\n !!!!@13357605857"},"at":{"atMobiles":["13357605857"],"isAtAll":false}}'

      # - name: test failure1 push
      #   if: ${{ failure() && steps.failure1.conclusion == 'failure' && github.event_name == 'push' }}
      #   run: |
      #     echo '${{ github.event.commits.url }}'
      #     curl 'https://oapi.dingtalk.com/robot/send?access_token=5e773ecb4c8c643a3fe16df50dc260b3220bf425033503f5bc4cca01421f1ec9'  \
      #     -H 'Content-Type: application/json' \
      #     -d '{"msgtype": "text","text": {"content":"测试新方法333 commit sha ${{ github.event.head_commit.url }}\n ${{ github.event.commits.url }} \n push的人的信息：${{ github.event.pusher.name }} and ${{ github.event.pusher.username }}!!!!@13357605857"},"at":{"atMobiles":["13357605857"],"isAtAll":false}}'
  
      # - name: test failure1 pr
      #   if: ${{ failure() && steps.failure1.conclusion == 'failure' && github.event_name == 'pull_request' }}
      #   run: |
      #     echo '${{ github.event.pull_request.html_url }}'
      #     curl 'https://oapi.dingtalk.com/robot/send?access_token=5e773ecb4c8c643a3fe16df50dc260b3220bf425033503f5bc4cca01421f1ec9'  \
      #     -H 'Content-Type: application/json' \
      #     -d '{"msgtype": "text","text": {"content":"测试新方法444 commit sha ${{ github.event.pull_request.url }}\n pr提交的人是${{ github.event.pull_request.user.name }} and ${{ github.event.pull_request.user.login }}!!!!@13357605857"},"at":{"atMobiles":["13357605857"],"isAtAll":false}}'